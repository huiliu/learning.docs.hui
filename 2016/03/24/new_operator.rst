operator new与placement new
************************************
关键字\ ``new``\ 实际上完成了两项工作，而这两项工作可以由\ ``operator new``\
和\ ``placement new``\ 分别完成。

.. author:: default
.. categories:: c/c++
.. tags:: c/c++, program
.. comments::
.. more::

``new operator``
==================
.. sourcecode:: cpp

    int n = new int(10);

上面的程序片段中，\ ``new``\ ，即：\ ``new operator``\ 。实际上进行了两项工作：\

1.  分配一块原始的内存，\ ``operator new``\ 的完成的工作
2.  用\ *10*\ 来初始化第一步分配的内存。\ ``placement new``\ 的工作

so, 通过分别定义\ ``operator new``\ 和\ ``placement new``\ 可以将内存操作分为
程序可以控制的两步。这样做有什么好处呢？

联想一下，内存的分配、初始化、释放都是要消耗时间的，如果可以将不使用的内存，重
新回收利用，就能节省分配和释放的时间，对于一些场景是非常具有诱惑力的。如\
memcache, redis等内存数据库。

所以利用\ ``operator new``\ 和\ ``placement new``\ 可以使用一个简单的内存复用
的内存池。

但是通过\ ``operator new``\ ,\ ``palcement new``\ 来“手动”管理内存，需要程序员
非常小心，而且，一旦出现问题，可能无法通过第三方工具检测内存泄漏等问题。比较安
全的一种做法是，一块内存中只保存一种对象类型，而且严禁进行类型转换。

总结
=====
+-----------------------+---------------------------------------------------+
|   ``new operator``    |   分配内存并初始化                                |
+-----------------------+---------------------------------------------------+
|   ``operator new``:   |   分配一块原始内存                                |
+-----------------------+---------------------------------------------------+
|   ``placement new``:  |   可以手动调用类的构造函数初始化一块内存。        |
+-----------------------+---------------------------------------------------+

ACKNOWLEGMENT
===============


参数资料
=========


