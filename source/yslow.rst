Best Practices for Speeding Up Your Web Site
********************************************

本文翻译自Yahoo\ [#ref]_

最小化HTTP请求数
================
终端用户80%的响应时间花费在前端。其中花费最多的是下载页面中的各种组件：图片，样\
式表，JavaScript，Flash等。减少页面包含在页面中的组件可以减少客户端在渲染被请求\
页面时的HTTP的请求数。

减少页面组件数的一种方法是简化页面的设计。但是有没有一种方法可以建立包含大量组\
件的页面同时保持更快的响应时间呢？实际上在设计富页面时，有一些方法可以减少HTTP\
的请求次数：

1.  ``合并文件``\ 是一种减少HTTP请求数的方法。\ ``合并文件``\ 即：通过将所有的\
    脚本文件合并为一个脚本文件，同样将所有样式表文件合并为一个文件。当每个页面\
    载入的脚本和样式表不尽相同时，\ ``合并文件``\ 的方法面临着更大挑战，但是应\
    该了解到在发布过程时这是一种改善响应时间的手段。
2.  `CSS Sprites <http://alistapart.com/article/sprites>`_\ 是减少图片请求数的\
    有效方法。将背景图片组合为单个文件并使用CSS的\ ``background-image``\ 和\
    ``background-position``\ 等属性来控制背景图片显示，以期符合期望。
3.  `Image maps <http://www.w3.org/TR/html401/struct/objects.html#h-13.6>`_\ 将\
    多幅图片组合为一张，图片总的大小相同，但是减少了HTTP请求数加快了页面的加载\
    ，只有当图片在页面上处于连续位置时才可以使用\ ``Image maps``\ 方法。例如导\
    航栏。定义\ ``Image maps``\ 的坐标是相当乏味且容易出错，导航使用\ ``Image
    maps``\ 也无法访问，因此并不推荐使用。
4.  ``Inline images``\ 使用\ `data: URL scheme
    <http://tools.ietf.org/html/rfc2397>`_\ 将图片嵌入到页面，这会增大HTML文件\
    。将\ ``inline images``\ 合入到样式表（可缓存的）是一种减少HTTP请求数的方法\
    ，同时可以避免增加页面的大小。需要注意的是\ ``Inline images``\ 方法并不被所\
    有的主流浏览器支持。

减少页面的HTTP请求数是提高性能的第一步，对于改善首次访问的用户的体验是最为重要\
的准则。如Tenni Theurer博文\ `Browser Cache Usage - Exposed!
<http://yuiblog.com/blog/2007/01/04/performance-research-part-2/>`_\ 中描述的：\
网站每天的访问中有40%-60%用户是没有缓存任何数据的，首次访问时更快是更好的用户体\
验的关键。

使用CDN（内容分发网络）
=======================
用户距服务器的距离对\ ``响应时间``\ 有一定影响，因此将内容部署到多个分散的服务器
上将使得用户加载速度更快，但是该从什么地方开始呢？

作为第一步，将内容分散到不同地方的服务器，不必重新设计Web应用让其工作在分布式架\
构下。对于不同的应用，调整架构需要不同的工作量，甚至令人望而生畏。如同步会话状\
态，在不同位置的服务器间复制数据库等。这些都可能让你尝试减少用户与服务器间响应\
时间的努力功亏一篑，永远还要走到调整应用架构这一步。

请铭记：用户响应时间的80%-90%花费在下载页面中的各种组件：图片、样式表、脚本、动\
画等。这是\ *性能黄金准则(Performance Golden Rule)*\ 。与其从重新设计你的应用架\
构这类艰巨的任务开始，不如将你的静态文件分发到CDN，这不仅可以大大减少响应时间，\
而且CDN（的使用）非常简单。

CDN是一系列分散在各地WEB服务器，可以更加高效快捷的向用户提供服务。分发内容到某\
一用户时CDN所选择的服务器通常基于网络近似度，如最小的网络跳数，服务器的最快响应\
时间。

一些大的互联网公司拥有自己的CDN，但是也有一些CDN服务商提供付费服务，如Akamai
Technologies, EdgeCast, level3。对于初创公司和个人站点，CDN的价格可能难以承受，\
但是如果你的受众量不断增大，变得更加全球化，为了达到更快的响应，使用CDN是必须的\
。在Yahoo，将静态内容从各自的应用中剥离并使用CDN（前面提到的第三方CDN服务商和\
Yahoo自己的CDN），使用用户的响应时间提高了20%以上。切换到CDN只需要相对简单的修\
改，但是可以极大的提高网站访问速度。

添加\ ``Expires``\ 或\ ``Cache-Control``\ HTTP头
=================================================
此规则包含两个方面：
1.  对于静态内容，通过将HTTP头\ ``Expires``\ 设定为遥远的将来使其“永不过期”；
2.  对于动态内容，通过合理的设定HTTP头\ ``Cache-Control``\ 为浏览器设定一个请求\
    条件。

现在网页被设计得越来越丰富，这意味着页面中包含更多的脚本、样式表，图片，动画等。用户第一次访问量不得不进行大量的HTTP请求，通过使用\ ``Expires``\ 头，可以让这些内容被客户端缓存，如此一来，用户接下来的访问就可以避免一些不必要的HTTP请求。\ ``Expires``\ 头大量应用于图片资源，但是实际上它可以被应用于所有的页面内容，包括脚本，样式表，动画等。

浏览器（代理）使用缓存来减少HTTP请求数和大小，使用网页加载更快。WEB服务器通过在HTTP响应头中加入\ ``Expires``\ 头来告诉客户端（程序）当前内容可以缓存多久。下面是一个Expires时间设定较远的HTTP\ ``Expires``\ 头，它告诉浏览器直到2010年4月15号当前返回的内容都是有效的。\ ::

    Expires: Thu, 15 Apr 2010 20:00:00 GMT

如果你使用的是Apache，使用指令\ ``ExpiresDefault``\ 来设定一个相对当前的过期时间。下面的例子使用\ ``ExpiresDefault``\ 指令将过期时间设定为请求时间10年后。（译者注：\ ``Expires``\ 的设定值与WEB服务器时间有关，如果客户端与服务器时间不一致可能引起问题。详细请阅读\ :rfc:`2616`\ ）\ ::

    ExpiresDefault "access plus 10 years"

请注意：如果使用\ ``Expires``\ 将内容设置为永不过期，无论什么时间你对某内容进行了更新，都必须更换此资源的文件名。在Yahoo，我们通常在构建步骤中加入这样一步：将版本号加入到文件名中。例如：\ *yahoo_2.0.6.js*

只有用户已经访问过你的站点，使用包含一个“永不过期”的\ ``Expires``\ HTTP头才能影响页面访问量（PV, page views）。对于初次访问以及注意器缓存为空时，它不会影响（减少）HTTP请求数。\ **因此这种性能改进的影响有赖于用户有多大几率是在有缓存情形下访问站点。**\ 我们测量了Yahoo站点的这方面数据，发现大约有75%-85%有页面访问量是在有缓存情况下进行的。\ **通过使用“永不过期”的Expires头，可以增加被缓存的内容，当其它页面被访问时可以重复利用它们而不是向服务器再次请求**


压缩页面内容(Gzip Components)
=============================== 
通过前端工程师的调优，可以显著的减少HTTP请求和响应在网络上的传输时间。另一方面，用户的访问带宽速度，ISP，proximity to peering exchange points等都超出了开发团队的控制范围。但是这些都会影响到响应时间，压缩可以减小HTTP响应内容的大小进而减少响应时间。



参考资料
=========
.. [#ref]   `Best Practices for Speeding Up Your Web Site <https://developer.yahoo.com/performance/rules.html>`_
